"use strict";(self.webpackChunkunofficial_adb_book=self.webpackChunkunofficial_adb_book||[]).push([[633],{7942:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>k});var n=a(959);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),c=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},s=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=c(a),s=r,k=m["".concat(p,".").concat(s)]||m[s]||u[s]||l;return a?n.createElement(k,i(i({ref:t},d),{},{components:a})):n.createElement(k,i({ref:t},d))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=s;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[m]="string"==typeof e?e:r,i[1]=o;for(var c=2;c<l;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}s.displayName="MDXCreateElement"},1444:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var n=a(5882),r=(a(959),a(7942));const l={sidebar_position:2},i="Packet Format",o={unversionedId:"basics/packet",id:"basics/packet",title:"Packet Format",description:"ADB protocol is a bi-directional, packet-oriented protocol. Each packet has a fixed-sized header and an optional, variable-sized payload.",source:"@site/docs/basics/packet.md",sourceDirName:"basics",slug:"/basics/packet",permalink:"/unofficial-adb-book/basics/packet",draft:!1,editUrl:"https://github.com/yume-chan/unofficial-adb-book/edit/main/docs/basics/packet.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"basics",previous:{title:"architecture",permalink:"/unofficial-adb-book/basics/architecture"},next:{title:"connection",permalink:"/unofficial-adb-book/basics/connection"}},p={},c=[{value:"Command",id:"command",level:2},{value:"arg0/arg1",id:"arg0arg1",level:2},{value:"Checksum",id:"checksum",level:2}],d={toc:c};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"packet-format"},"Packet Format"),(0,r.kt)("p",null,"ADB protocol is a bi-directional, packet-oriented protocol. Each packet has a fixed-sized header and an optional, variable-sized payload."),(0,r.kt)("p",null,"Because it is originally implemented in C for Linux, all multi-byte fields are in little-endian, and all strings are in UTF-8 encoding."),(0,r.kt)("p",null,"Before Android 9, it used ",(0,r.kt)("inlineCode",{parentName:"p"},"char *")," for string handling, so null terminators are required. Now it\u2019s transitioning to ",(0,r.kt)("inlineCode",{parentName:"p"},"std::string"),", which doesn't require null-terminators. But not all places has been changed, and for backward compatibility, adding null-terminators are still recommended."),(0,r.kt)("p",null,"Each packet contains following fields:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Byte Offset"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"char","[4]"),(0,r.kt)("td",{parentName:"tr",align:null},"command"),(0,r.kt)("td",{parentName:"tr",align:null},"Packet type")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},"in32"),(0,r.kt)("td",{parentName:"tr",align:null},"arg0"),(0,r.kt)("td",{parentName:"tr",align:null},"Meaning defined by each packet type")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"8"),(0,r.kt)("td",{parentName:"tr",align:null},"in32"),(0,r.kt)("td",{parentName:"tr",align:null},"arg1"),(0,r.kt)("td",{parentName:"tr",align:null},"Meaning defined by each packet type")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"12"),(0,r.kt)("td",{parentName:"tr",align:null},"uint32"),(0,r.kt)("td",{parentName:"tr",align:null},"payloadLength"),(0,r.kt)("td",{parentName:"tr",align:null},"Length of payload, in bytes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"16"),(0,r.kt)("td",{parentName:"tr",align:null},"uint32"),(0,r.kt)("td",{parentName:"tr",align:null},"checksum"),(0,r.kt)("td",{parentName:"tr",align:null},"Checksum for verify data integrity")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"20"),(0,r.kt)("td",{parentName:"tr",align:null},"uint32"),(0,r.kt)("td",{parentName:"tr",align:null},"magic"),(0,r.kt)("td",{parentName:"tr",align:null},"Should equal to ",(0,r.kt)("inlineCode",{parentName:"td"},"command ^ 0xFFFFFFFF"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"24"),(0,r.kt)("td",{parentName:"tr",align:null},"byte","[payloadLength]"),(0,r.kt)("td",{parentName:"tr",align:null},"payload"),(0,r.kt)("td",{parentName:"tr",align:null},"Meaning defined by each packet type")))),(0,r.kt)("h2",{id:"command"},"Command"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"command")," field consists of four ASCII characters."),(0,r.kt)("p",null,"For example, ",(0,r.kt)("inlineCode",{parentName:"p"},'"CNXN"')," packets' ",(0,r.kt)("inlineCode",{parentName:"p"},"command")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"[0x43, 0x4e, 0x58, 0x4e]"),", or ",(0,r.kt)("inlineCode",{parentName:"p"},"0x4e584e43")," in Hex (Hex strings are big-endian)."),(0,r.kt)("h2",{id:"arg0arg1"},"arg0/arg1"),(0,r.kt)("p",null,"Two integer parameters for the ",(0,r.kt)("inlineCode",{parentName:"p"},"command"),"."),(0,r.kt)("h2",{id:"checksum"},"Checksum"),(0,r.kt)("p",null,"Checksum is calculated by adding up all bytes in ",(0,r.kt)("inlineCode",{parentName:"p"},"payload"),"."),(0,r.kt)("p",null,"For example, when the payload is ",(0,r.kt)("inlineCode",{parentName:"p"},"[0x01, 0x02, 0x03]"),", the ",(0,r.kt)("inlineCode",{parentName:"p"},"checksum")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"0x01 + 0x02 + 0x03 = 0x00000006"),"."))}m.isMDXComponent=!0}}]);